version: '3.8'

services:
  # 1. Aplicação Django
  django:
    build: .
    command: python manage.py runserver 0.0.0.0:8000 # Para desenvolvimento. Para produção, use Gunicorn.
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env # Arquivo para variáveis de ambiente (DB_HOST, DB_USER, etc.)
    depends_on:
      - db
      - redis
    # Para produção, você pode ter várias instâncias do Django rodando com Gunicorn
    # Para desenvolvimento, uma única instância é suficiente

  # 2. Banco de Dados PostgreSQL
  db:
    image: postgres:16-alpine # Versão estável e leve do PostgreSQL
    volumes:
      - pg_data:/var/lib/postgresql/data # Volume persistente para os dados do DB
    env_file:
      - .env # Carrega variáveis como POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD
    ports:
      - "5432:5432" # Apenas para acesso direto em desenvolvimento, pode ser removido em produção se apenas o Django/Celery acessar.

  # 3. Redis (Cache e Broker para Celery)
  redis:
    image: redis:7-alpine # Versão estável e leve do Redis
    command: redis-server --appendonly yes # Habilita persistência básica para Redis
    volumes:
      - redis_data:/data # Volume persistente para os dados do Redis (se precisar de persistência)
    ports:
      - "6379:6379" # Apenas para acesso direto em desenvolvimento, pode ser removido em produção.

  # 4. Celery Worker
  celery_worker:
    build: .
    command: celery -A repositoriogit worker -l info # Substitua 'your_project_name' pelo nome do seu projeto Django
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - django # Para garantir que a aplicação Django esteja pronta para o Celery

  # 5. Celery Beat (Agendador de Tarefas) - Opcional, se precisar de tarefas agendadas
  celery_beat:
    build: .
    command: celery -A repositoriogit beat -l info --scheduler django_celery_beat.schedulers.DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - django

  # 6. Nginx (Proxy Reverso e Servidor de Arquivos Estáticos/Mídia) - Para produção
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443" # Para HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Seu arquivo de configuração do Nginx
      - ./static:/app/static # Seus arquivos estáticos do Django
      - ./media:/app/media # Seus arquivos de mídia do Django
    depends_on:
      - django # Nginx precisa do Django rodando para proxy

volumes:
  pg_data:
  redis_data:
  # Você pode adicionar mais volumes se precisar de persistência para outros serviços