# Generated by Django 5.2.3 on 2025-06-12 03:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GitUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(db_index=True, help_text='ID único do usuário na plataforma Git (ex: GitHub user ID)', max_length=100, unique=True)),
                ('username', models.CharField(db_index=True, help_text='Nome de usuário na plataforma Git', max_length=255)),
                ('avatar_url', models.URLField(blank=True, max_length=512, null=True)),
                ('web_url', models.URLField(blank=True, max_length=512, null=True)),
                ('user_type', models.CharField(blank=True, help_text='Tipo de usuário (User, Bot, Organization)', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Usuário Git',
                'verbose_name_plural': 'Usuários Git',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='Repositorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome do repositório (ex: my-project)', max_length=255)),
                ('owner', models.CharField(help_text='Proprietário/Organização do repositório (ex: octocat)', max_length=255)),
                ('full_name', models.CharField(db_index=True, help_text='Nome completo do repositório (owner/name)', max_length=512, unique=True)),
                ('platform', models.CharField(choices=[('github', 'GitHub'), ('gitlab', 'GitLab'), ('bitbucket', 'Bitbucket')], default='github', help_text='Plataforma Git onde o repositório está hospedado.', max_length=20)),
                ('external_id', models.CharField(blank=True, help_text='ID único do repositório na plataforma externa (ex: GitHub ID). Útil para APIs.', max_length=100, null=True)),
                ('clone_url_http', models.URLField(blank=True, help_text='URL para clonar o repositório via HTTPS', max_length=512, null=True)),
                ('clone_url_ssh', models.URLField(blank=True, help_text='URL para clonar o repositório via SSH', max_length=512, null=True)),
                ('web_url', models.URLField(blank=True, help_text='URL do repositório na interface web (ex: https://github.com/owner/name)', max_length=512, null=True)),
                ('description', models.TextField(blank=True, help_text='Descrição do repositório', null=True)),
                ('language', models.CharField(blank=True, help_text='Linguagem principal do repositório', max_length=100, null=True)),
                ('stars_count', models.IntegerField(default=0, help_text='Número de estrelas/likes do repositório')),
                ('forks_count', models.IntegerField(default=0, help_text='Número de forks do repositório')),
                ('open_issues_count', models.IntegerField(default=0, help_text='Número de issues abertas (do Git, pode ser atualizado)')),
                ('default_branch', models.CharField(default='main', help_text='Nome do branch padrão (main, master, etc.)', max_length=100)),
                ('is_private', models.BooleanField(default=False, help_text='Indica se o repositório é privado')),
                ('archived', models.BooleanField(default=False, help_text='Indica se o repositório foi arquivado na plataforma Git')),
                ('active', models.BooleanField(default=True, help_text='Indica se o monitoramento deste repositório está ativo.')),
                ('last_sync_issues_at', models.DateTimeField(blank=True, help_text='Data/hora da última sincronização de issues.', null=True)),
                ('last_sync_commits_at', models.DateTimeField(blank=True, help_text='Data/hora da última sincronização de commits.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data/hora de criação do registro no seu sistema.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data/hora da última atualização do registro no seu sistema.')),
            ],
            options={
                'verbose_name': 'Repositório',
                'verbose_name_plural': 'Repositórios',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(help_text='ID único da issue na plataforma Git (ex: GitHub Issue ID)', max_length=100)),
                ('number', models.IntegerField(db_index=True, help_text='Número da issue dentro do repositório (ex: #123).')),
                ('title', models.CharField(help_text='Título da issue.', max_length=512)),
                ('body', models.TextField(blank=True, help_text='Corpo/descrição da issue.', null=True)),
                ('state', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('all', 'All')], db_index=True, help_text='Estado atual da issue (aberta, fechada).', max_length=20)),
                ('created_at_git', models.DateTimeField(db_index=True, help_text='Data e hora de criação da issue na plataforma Git.')),
                ('updated_at_git', models.DateTimeField(db_index=True, help_text='Data e hora da última atualização da issue na plataforma Git.')),
                ('closed_at_git', models.DateTimeField(blank=True, db_index=True, help_text='Data e hora de fechamento da issue na plataforma Git.', null=True)),
                ('labels', models.JSONField(blank=True, help_text='Array JSON de labels/tags da issue.', null=True)),
                ('milestone', models.JSONField(blank=True, help_text='Informações da milestone da issue (JSON).', null=True)),
                ('comments_count', models.IntegerField(default=0, help_text='Número de comentários na issue.')),
                ('is_pull_request', models.BooleanField(default=False, help_text="Indica se esta 'issue' é na verdade um pull request (algumas APIs tratam PRs como issues).")),
                ('web_url', models.URLField(blank=True, help_text='URL da issue na interface web.', max_length=512, null=True)),
                ('synced_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da sincronização desta issue para o seu sistema.')),
                ('assignees', models.ManyToManyField(blank=True, help_text='Usuários atribuídos a esta issue.', related_name='assigned_issues', to='core.gituser')),
                ('author', models.ForeignKey(blank=True, help_text='Usuário que criou a issue.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_issues', to='core.gituser')),
                ('closed_by', models.ForeignKey(blank=True, help_text='Usuário que fechou a issue (se aplicável).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_issues', to='core.gituser')),
                ('repository', models.ForeignKey(help_text='Repositório ao qual esta issue pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='core.repositorio')),
            ],
            options={
                'verbose_name': 'Issue',
                'verbose_name_plural': 'Issues',
                'ordering': ['-created_at_git'],
                'unique_together': {('repository', 'external_id')},
            },
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sha', models.CharField(db_index=True, help_text='O SHA completo (hash) do commit.', max_length=40)),
                ('short_sha', models.CharField(db_index=True, help_text='O SHA curto do commit (primeiros 7 caracteres).', max_length=7)),
                ('message', models.TextField(help_text='Mensagem completa do commit.')),
                ('author_date_git', models.DateTimeField(db_index=True, help_text='Data e hora em que o autor fez o commit.')),
                ('committer_date_git', models.DateTimeField(db_index=True, help_text='Data e hora em que o committer aplicou o commit.')),
                ('additions', models.IntegerField(default=0, help_text='Número de linhas adicionadas no commit.')),
                ('deletions', models.IntegerField(default=0, help_text='Número de linhas deletadas no commit.')),
                ('total_changes', models.IntegerField(default=0, help_text='Total de linhas modificadas (adições + deleções).')),
                ('parents_shas', models.JSONField(blank=True, help_text='Lista JSON dos SHAs dos commits pais.', null=True)),
                ('verification_status', models.CharField(blank=True, help_text="Status de verificação do commit (ex: 'verified', 'unverified', 'not_signed').", max_length=50, null=True)),
                ('verification_reason', models.CharField(blank=True, help_text='Razão do status de verificação.', max_length=255, null=True)),
                ('web_url', models.URLField(blank=True, help_text='URL do commit na interface web da plataforma Git.', max_length=512, null=True)),
                ('synced_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora da sincronização deste commit para o seu sistema.')),
                ('author', models.ForeignKey(blank=True, help_text='Usuário que é o autor (quem escreveu) do commit.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_commits', to='core.gituser')),
                ('committer', models.ForeignKey(blank=True, help_text='Usuário que é o committer (quem aplicou) do commit.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='committed_commits', to='core.gituser')),
                ('issues', models.ManyToManyField(blank=True, help_text='Issues vinculadas a este commit através da mensagem.', related_name='linked_commits', to='core.issue')),
                ('repository', models.ForeignKey(help_text='Repositório ao qual este commit pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='commits', to='core.repositorio')),
            ],
            options={
                'verbose_name': 'Commit',
                'verbose_name_plural': 'Commits',
                'ordering': ['-committer_date_git'],
                'unique_together': {('repository', 'sha')},
            },
        ),
    ]
